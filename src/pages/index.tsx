import { type NextPage } from "next";
import Head from "next/head";

import { api } from "@/utils/api";
import { Action, Domain } from "@prisma/client";
import {
  Box,
  FormControl,
  FormControlLabel,
  FormLabel,
  InputLabel,
  OutlinedInput,
  Radio,
  RadioGroup,
} from "@mui/material";

const Home: NextPage = () => {
  const abilities = api.permission.getAbilities.useQuery();

  return (
    <>
      <Head>
        <title>Permission Model Sample</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Box>
          <FormControl fullWidth sx={{ m: 2 }}>
            <InputLabel htmlFor="name">ロール名</InputLabel>
            <OutlinedInput id="name" label="Name" />
          </FormControl>
          <Box sx={{ m: 2 }}>
            {Object.keys(Domain).map((domain) => {
              return (
                <div key={domain}>
                  <FormControl fullWidth>
                    <FormLabel id="demo-radio-buttons-group-label">
                      {DomainLabelMapper[domain]}
                    </FormLabel>
                    <RadioGroup
                      aria-labelledby="demo-radio-buttons-group-label"
                      name="radio-buttons-group"
                      row
                    >
                      {[""].concat(Object.keys(Action)).map((action) => (
                        <FormControlLabel
                          key={`${domain}-${action}`}
                          value={action}
                          control={<Radio />}
                          label={ActionLabelMapper[action]}
                        />
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>
              );
            })}
          </Box>
        </Box>
      </main>
    </>
  );
};

const DomainLabelMapper = {
  project: "事業管理",
  budget: "予算管理",
  evaluation: "事業評価",
  user: "ユーザー",
  role: "ロール",
  organization: "組織",
  lock: "更新抑止",
} as const satisfies Record<Domain, string>;

const ActionLabelMapper = {
  "": "なし",
  query: "参照",
  mutate: "更新",
} as const satisfies Record<Action | "", string>;

export default Home;
